{"version":3,"sources":["components/stopwatch.js","App.js","serviceWorker.js","index.js"],"names":["Stopwatch","renderSecs","renderMins","renderHours","useState","secs","setSecs","mins","setMins","hours","setHours","tick","setTick","timerRunning","setTimerRunning","className","Jumbotron","onClick","console","log","setInterval","clearInterval","App","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7817239f.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport './stopwatch.css';\r\nimport { Jumbotron } from \"reactstrap\";\r\n\r\nfunction Stopwatch() {\r\n\r\n    /*utilizing useState to set the state with React Hooks*/\r\n    const [secs, setSecs] = useState(0);\r\n    const [mins, setMins] = useState(0);\r\n    const [hours, setHours] = useState(0);\r\n    const [tick, setTick] = useState();\r\n    const [timerRunning, setTimerRunning] = useState(false);\r\n    let renderSecs;\r\n    let renderMins;\r\n    let renderHours;\r\n\r\n    /*if secs is greater than 59, increment mins by 1 and reset secs to zero.*/\r\n    if(secs > 59) {\r\n        setMins(mins => mins + 1);\r\n        setSecs(0);\r\n    }\r\n\r\n    /*if mins is greater than 59, increment hours by 1 and reset mins to zero.*/\r\n    if(mins > 59) {\r\n        setHours(hours => hours + 1);\r\n        setMins(0);\r\n    }\r\n\r\n    /*if secs is less than 10, render a zero in front of it.*/\r\n    if(secs < 10){\r\n        renderSecs = '0' + secs;\r\n    } else{\r\n        renderSecs = secs;\r\n    }\r\n\r\n    /*if mins is less than 10, render a zero in front of it.*/\r\n    if(mins < 10){\r\n        renderMins = '0' + mins;\r\n    } else{\r\n        renderMins = mins;\r\n    }\r\n\r\n    /*if hours is less than 10, render a zero in front of it.*/\r\n    if(hours < 10){\r\n        renderHours = '0' + hours;\r\n    } else{\r\n        renderHours = hours;\r\n    }\r\n\r\n    /*function to start the timer*/\r\n    function startTimer() {\r\n        console.log(\"Start Timer Button clicked!\");\r\n        /*This IF statement prevents additional setIntervals from being stacked while the timer is running.*/\r\n        if(timerRunning === false) {\r\n            /*setting tick as state so that it retains the setInterval function across re-renders*/\r\n            setTick(setInterval(() => setSecs(secs => secs + 1), 1000));\r\n            setTimerRunning(true);\r\n        }\r\n    }\r\n\r\n    /*function to stop the timer*/\r\n    function stopTimer(){\r\n        console.log('Stop Button clicked!');\r\n        clearInterval(tick);\r\n        setTimerRunning(false);\r\n    }\r\n\r\n    /*function to reset the timer*/\r\n    function resetTimer(){\r\n        console.log('Reset Button clicked!');\r\n        clearInterval(tick);\r\n        setTimerRunning(false);\r\n        setSecs(0);\r\n        setMins(0);\r\n        setHours(0);\r\n    }\r\n\r\n    return(\r\n        <header className='container'>\r\n            <div className='row justify-content-md-center'>\r\n                <div className='col-md-6 col-xs-12'>\r\n\r\n                    <Jumbotron>\r\n                        <div className='fontgradient'>Fullmetal Alchemist Stopwatch</div>\r\n                    </Jumbotron>\r\n\r\n                    <div className='jumbotron'>\r\n                        <p className='fontgradient'>\r\n                            {renderHours}:{renderMins}:{renderSecs}\r\n                        </p>\r\n                    </div>\r\n\r\n                    {/*when the Start button is clicked, it will run the startTimer function*/}\r\n                    <button className='btn btn-primary' onClick={startTimer}>Start</button>\r\n\r\n                    {/*when the Stop button is clicked, it will run the stopTimer function*/}\r\n                    <button className='btn btn-danger' onClick={stopTimer}>Stop</button>\r\n\r\n                    {/*when the Reset button is clicked, it will run the resetTimer function*/}\r\n                    <button className='btn btn-warning' onClick={resetTimer}>Reset</button>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\n\r\nexport default Stopwatch;","import React from 'react';\nimport Stopwatch from './components/stopwatch.js'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App bg\">\n      <Stopwatch path='/'/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}